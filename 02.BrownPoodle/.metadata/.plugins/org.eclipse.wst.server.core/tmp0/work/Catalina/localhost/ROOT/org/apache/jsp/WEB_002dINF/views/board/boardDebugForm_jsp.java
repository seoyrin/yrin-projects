/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.64
 * Generated at: 2021-06-11 02:20:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.brownpoodle.board.vo.BoardVO;
import java.util.List;

public final class boardDebugForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.brownpoodle.board.vo.BoardVO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Update, Delete, Like</title>\r\n");
      out.write("\r\n");
      out.write("<script  src=\"http://code.jquery.com/jquery-latest.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("\t$(document).ready(function(){\r\n");
      out.write("\t\t \r\n");
      out.write("\t\t// ==========================수정, 삭제 디버깅============================\r\n");
      out.write("\t\t// 수정하기\r\n");
      out.write("\t\t$(document).on(\"click\", \"#update\", function(){\r\n");
      out.write("\t\t\t$(\"#boardDebugForm\").attr({\r\n");
      out.write("\t\t\t\t\"method\" : \"POST\",\r\n");
      out.write("\t\t\t\t\"action\" : \"boardUpdate.bp\"\r\n");
      out.write("\t\t\t}).submit();\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 삭제하기 : 삭제 -> 전체보기 페이지로 이동 \r\n");
      out.write("\t\t$(document).on(\"click\", \"#delete\", function(){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\tlet deleteURL = \"boardDelete.bp\";\r\n");
      out.write("\t\t\tlet reqType = \"POST\";\r\n");
      out.write("\t\t\tlet dataParam = {\r\n");
      out.write("\t\t\t\t\tb_num : $(\"#b_num\").val()\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\talert(\"dataParam >>> : \" + dataParam);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\turl : deleteURL,\r\n");
      out.write("\t\t\t\ttype : reqType,\r\n");
      out.write("\t\t\t\tdata : dataParam,\r\n");
      out.write("\t\t\t\tsuccess : whenSuccess,\r\n");
      out.write("\t\t\t\terror : whenError\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tfunction whenSuccess(resData) {\r\n");
      out.write("\t\t\t\tif (\"DELETE_OK\" == resData) {\r\n");
      out.write("\t\t\t\t\talert(\"삭제가 완료되었습니다.\");\r\n");
      out.write("\t\t\t\t\tlocation.href=\"boardInsertForm.bp\";\r\n");
      out.write("\t\t\t\t}else if (\"DELETE_FAIL\" == resData) {\r\n");
      out.write("\t\t\t\t\talert(\"삭제가 실패하였습니다.\");\r\n");
      out.write("\t\t\t\t\tlocation.href=\"boardInsertForm.bp\";\r\n");
      out.write("\t\t\t\t};\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tfunction whenError(e) {\r\n");
      out.write("\t\t\t\talert(\"error e >>> : \" + e.responseText);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// ==========================좋아요 디버깅1============================\r\n");
      out.write("\t\t// 동기를 하면 X -> ajax 동기 awake : https://blueshw.github.io/2018/02/27/async-await/\r\n");
      out.write("\t\t// 좋아요 버튼 눌렀을 때, ajax 처리\r\n");
      out.write("\t\t$(document).on(\"click\", \"#like_img\", function(){\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tlet likeclickURL = \"boardLikeCheck.bp\";\r\n");
      out.write("\t\t\tlet reqType =\"POST\";\r\n");
      out.write("\t\t\tlet dataParam = {\r\n");
      out.write("\t\t\t\t\tm_num : $(\"#m_num\").val(),\r\n");
      out.write("\t\t\t\t\tb_num : $(\"#b_num\").val()\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// alert(\"dataParam >>> : \" + dataParam); // => dataParam >>> : [object Object]\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\turl : likeclickURL,\r\n");
      out.write("\t\t\t\ttype : reqType,\r\n");
      out.write("\t\t\t\tdata : dataParam,\r\n");
      out.write("\t\t\t\tasync : false,\r\n");
      out.write("\t\t\t\tsuccess : whenSuccess,\r\n");
      out.write("\t\t\t\terror : whenError\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tfunction whenSuccess(resData) {\r\n");
      out.write("\t\t\t\tif (resData.resultCheck == 1) {\r\n");
      out.write("\t\t\t\t\t//$(\"#like_img\").attr(\"src\", \"/resources/img/boardimg/heart_y.png\"); //=======> 이부분은 필요한가??????????? ■\r\n");
      out.write("\t\t\t\t\t$(\"#b_like\").empty();\r\n");
      out.write("\t\t\t\t\t// $(\"#b_like\").append(resData.b_like);\r\n");
      out.write("\t\t\t\t\t$(\"#b_like\").attr(\"value\", resData.b_like);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t}else if (resData.resultCheck == 0) {\r\n");
      out.write("\t\t\t\t\t//$(\"#like_img\").attr(\"src\", \"/resources/img/boardimg/heart_n.png\"); //■ \r\n");
      out.write("\t\t\t\t\t$(\"#b_like\").empty();\r\n");
      out.write("\t\t\t\t\t// $(\"#b_like\").append(resData.b_like);\r\n");
      out.write("\t\t\t\t\t$(\"#b_like\").attr(\"value\", resData.b_like);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t}else {\r\n");
      out.write("\t\t\t\t\talert(\"resData에러!!\");\r\n");
      out.write("\t\t\t\t};\r\n");
      out.write("\t\t\t\t// location.href=\"boardLikeSelect.bp\";\r\n");
      out.write("\t\t\t\t// location.reload(); // 새로고침 : 안해도됨 \r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tfunction whenError(e) {\r\n");
      out.write("\t\t\t\talert(\"error e >>> : \" + e.responseText);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}); \r\n");
      out.write("\t\t\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
 request.setCharacterEncoding("EUC-KR");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("<h1>Update, Delete 디버깅</h1>\r\n");
      out.write("\r\n");
      out.write("<!-- UPDATE, DELETE : 제목, 내용, 글번호 -->\r\n");
      out.write("<!--  \r\n");
      out.write("<div>\r\n");
      out.write("\t<form name=\"boardDebugForm\" id=\"boardDebugForm\">\r\n");
      out.write("\t\t글번호 : <input type=\"text\" name=\"b_num\" id=\"b_num\"><br>\r\n");
      out.write("\t\t제목 : <input type=\"text\" name=\"b_subject\" id=\"b_subject\"><br>\r\n");
      out.write("\t\t내용 : <input type=\"text\" name=\"b_content\" id=\"b_content\"><br>\r\n");
      out.write("\t\r\n");
      out.write("\t\t<button type=\"button\" id=\"update\">수정하기</button>\r\n");
      out.write("\t\t<button type=\"button\" id=\"delete\">삭제하기</button>\r\n");
      out.write(" \t</form>\r\n");
      out.write("</div>\r\n");
      out.write("<hr><p>\r\n");
      out.write("-->\r\n");
      out.write("<hr>\r\n");
      out.write("\r\n");
      out.write("<!-- 좋아요 \r\n");
      out.write("\t\t로그인한 회원번호 : m_num\r\n");
      out.write("\t\t게시글 번호 : b_num\r\n");
      out.write("-->\r\n");
      out.write("<h1>좋아요♡->♥ 디버깅</h1>\r\n");
      out.write("<div>\r\n");
      out.write("\t<form name=\"likeForm\" id=\"likeForm\">\r\n");
      out.write("\r\n");

	// likeSelect
	Object obj1 = request.getAttribute("likeSelect");
	List<BoardVO> list1 = (List)obj1;
	BoardVO bvo = null;
	if (list1.size() == 1) {
		bvo = list1.get(0);
	};
	
	// likeCheck
	String src = "";
	Object obj2 = request.getAttribute("likeCheck");
	//int nCnt = Integer.valueOf(obj2);
	int nCnt = (int)obj2;
	System.out.println("boardDebugForm nCnt >>> : " + nCnt);
	if (nCnt == 0) {
		src="/resources/img/boardimg/heart_n.png";
	}else {
		src="/resources/img/boardimg/heart_y.png";
	}

      out.write("\r\n");
      out.write("\t\t<!-- 회원번호와 게시글번호 임의로 지정해서 넘겨주기★ -->\r\n");
      out.write("\t\t<input type=\"text\" name=\"m_num\" id=\"m_num\" value=\"M0002\">\r\n");
      out.write("\t\t<input type=\"text\" name=\"b_num\" id=\"b_num\" value=\"B0010\">\r\n");
      out.write(" \t\t\r\n");
      out.write(" \t\t<!-- 좋아요 ♡ 버튼 -->\r\n");
      out.write("\t\t");
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<input type=\"image\" name=\"like_img\" id=\"like_img\" \r\n");
      out.write("\t\t\t       src=\"");
      out.print( src );
      out.write("\" alt=\"좋아요이미지\"\r\n");
      out.write("\t\t\t       style=\"width:40px; height:40px\">\r\n");
      out.write("\t\r\n");
      out.write("\t\t<br>\r\n");
      out.write("\t\t<!-- 좋아요 수 보여주기 -->\r\n");
      out.write("\t\t<input type=\"text\" name=\"b_like\" id=\"b_like\" value=\"");
      out.print( bvo.getB_like() );
      out.write("\"> <!-- 좋아요 수 -->\r\n");
      out.write("\t</form>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
